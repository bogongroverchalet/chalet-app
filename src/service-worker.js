/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { skipWaiting, clientsClaim } from 'workbox-core'
import { precache, precacheAndRoute, createHandlerBoundToURL, cleanupOutdatedCaches } from 'workbox-precaching'
import { createPartialResponse } from 'workbox-range-requests'
import { registerRoute } from 'workbox-routing'
import { cacheNames } from 'workbox-core'
import { getCacheKeyForURL } from 'workbox-precaching'

skipWaiting()
clientsClaim()

const MAP_REVISION = '1'
precache([{ url: '/Bogong_High_Plains.pmtiles', revision: MAP_REVISION }])

function uninstallWorker() {
  self.skipWaiting()
  self.registration
    .unregister()
    .then(function () {
      return self.clients.matchAll()
    })
    .then(function (clients) {
      clients.forEach((client) => client.navigate(client.url))
    })
}

registerRoute(
  ({ url }) => url.pathname.endsWith('.pmtiles'),
  async ({ request }) => {
    const cache = await caches.open(cacheNames.precache)
    let response,
      failureTimeout = null
    await (async function getFromCache() {
      response = await cache.match(getCacheKeyForURL('/Bogong_High_Plains.pmtiles'))
      if (!response) {
        if (!failureTimeout) {
          failureTimeout = setTimeout(uninstallWorker, 60e3)
        }
        return new Promise((resolve) => setTimeout(() => getFromCache().then(resolve), 200))
      }
    })()
    clearTimeout(failureTimeout)
    return createPartialResponse(request, response)
  }
)

self.addEventListener('message', async ({ data, source }) => {
  if (data !== 'isMapDataReady') return

  const cache = await caches.open(cacheNames.precache)
  await (async function waitForCache() {
    if (!(await cache.match(getCacheKeyForURL('/Bogong_High_Plains.pmtiles')))) {
      return new Promise((resolve) => setTimeout(() => waitForCache().then(resolve), 200))
    }
  })()
  source.postMessage('mapDataReady')
})

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
const WB_MANIFEST = self.__WB_MANIFEST
precacheAndRoute(WB_MANIFEST)

cleanupOutdatedCaches()
// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$')
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false
    } // Return true to signal that we want to use the handler.

    return true
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
)
